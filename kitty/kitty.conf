kitty_mod ctrl+alt

# kitty scrollback integration, see https://github.com/mikesmithgh/kitty-scrollback.nvim
allow_remote_control socket-only
listen_on unix:/tmp/kitty
shell_integration enabled

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten /Users/bjarne/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --nvim-args --clean --noplugin -n -u /Users/bjarne/dotfiles/kitty/nvim/kitty-scrollback/init.lua

# Browse scrollback buffer in nvim
map kitty_mod+h kitty_scrollback_nvim
# Browse output of the last shell command in nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# Show clicked command output in nvim
mouse_map kitty_mod+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output


# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other
map kitty_mod+- launch --location=hsplit --cwd=current

# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side
map kitty_mod+\ launch --location=vsplit --cwd=current

# Rotate the current split, chaging its split axis from vertical to
# horizontal or vice versa
map kitty_mod+r layout_action rotate

# Move the active window in the indicated direction
# map kitty_mod+h move_window left
map kitty_mod+l move_window right
map kitty_mod+k move_window up
map kitty_mod+j move_window down

# Switch focus to the neighboring window in the indicated direction
# map ctrl+h neighboring_window left
# map ctrl+l neighboring_window right
# map ctrl+k neighboring_window up
# map ctrl+j neighboring_window down

# Switch tabs
map kitty_mod+n next_tab
map kitty_mod+p previous_tab

map kitty_mod+t new_tab
map kitty_mod+q close_tab

map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+4 goto_tab 4

enabled_layouts splits:split_axis=horizontal

mouse_hide_wait 3.0
active_border_color #f6c177
inactive_border_color #9ccfd8

tab_bar_style                   custom
tab_separator                   ""
# REF: https://github.com/kovidgoyal/kitty/discussions/4447
tab_fade                        0 0 0 0
tab_title_template              "{fmt.fg._C4A7E7}{fmt.bg.default}  {index}:{f'{title[:6]}…{title[-6:]}' if title.rindex(title[-1]) + 1 > 25 else title}{' []' if layout_name == 'stack' else ''} "
active_tab_title_template       "{fmt.fg._f6c177}{fmt.bg.default}  {index}:{f'{title[:6]}…{title[-6:]}' if title.rindex(title[-1]) + 1 > 25 else title}{' []' if layout_name == 'stack' else ''} "
tab_bar_edge                    top
tab_bar_align                   left
tab_bar_margin_width            0.0
tab_bar_margin_height           8.0 0.0
active_tab_font_style           bold-italic
inactive_tab_font_style         normal
tab_bar_min_tabs                2
tab_activity_symbol             none
bell_on_tab                     no

enable_audio_bell               no
window_alert_on_bell            no
visual_bell_duration            0.0
visual_bell_color               none

window_border_width             0.6
window_margin_width             0.0

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
window_padding_width 5 5 0 0

background_opacity 0.95
background_blur 1
# Make kitty borderless
# "yes" disables round corners and hides the title bar 
# "titlebar-only" leaves round corners but hides title bar
# hide_window_decorations yes
hide_window_decorations titlebar-only
#
# The following command checks if tmux is installed.
# If tmux is installed, it automatically attaches to an existing tmux session.
# If no tmux session exists, a new one is created.
# If tmux is not installed, it simply starts zsh without tmux.
#
# For this to work properly, you need to make sure that your shell is configured
# for homebrew, so you should have this line:
# eval "$(/opt/homebrew/bin/brew shellenv)"
# In your ~/.zprofile file
# If you don't have that line, or if the file doesn't exist, run this:
# echo '' >>~/.zprofile && echo '# Configure shell for brew' >>~/.zprofile && echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>~/.zprofile && eval "$(/opt/homebrew/bin/brew shellenv)"
#
# This assumes you installed tmux through brew if using macos
shell zsh --login -c "if command -v tmux >/dev/null 2>&1; then tmux attach || tmux; else zsh; fi"

macos_option_as_alt right

font_size 12

# BEGIN_KITTY_THEME
# Rosé Pine
include current-theme.conf
# END_KITTY_THEME

# BEGIN_KITTY_FONTS
font_family      family="MesloLGM Nerd Font Mono"
bold_font        auto
italic_font      auto
bold_italic_font auto
# END_KITTY_FONTS

# BEGIN_KITTY_SYMBOL_MAPS
symbol_map U+E000-U+F1AF0 MesloLGM Nerd Font
# END_KITTY_SYMBOL_MAPS

# I'm adding these below the theme in case the theme sets them
cursor #ebfafa
cursor_text_color #0D1116

