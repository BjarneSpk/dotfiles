kitty_mod ctrl+alt

# kitty scrollback integration, see https://github.com/mikesmithgh/kitty-scrollback.nvim
allow_remote_control socket-only
listen_on unix:/tmp/kitty
shell_integration enabled

# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten ${XDG_DATA_HOME}/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --nvim-args --clean --noplugin -n -u ${DOTFILES}/kitty/nvim/kitty-scrollback/init.lua

# Browse scrollback buffer in nvim
map kitty_mod+h kitty_scrollback_nvim
# Browse output of the last shell command in nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# Show clicked command output in nvim
mouse_map kitty_mod+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output


# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other
map kitty_mod+- launch --location=hsplit --cwd=current

# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side
map kitty_mod+\ launch --location=vsplit --cwd=current

# Rotate the current split, chaging its split axis from vertical to
# horizontal or vice versa
map kitty_mod+r layout_action rotate

# Move the active window in the indicated direction
# map kitty_mod+h move_window left
map kitty_mod+l move_window right
map kitty_mod+k move_window up
map kitty_mod+j move_window down

# Switch focus to the neighboring window in the indicated direction
# map ctrl+h neighboring_window left
# map ctrl+l neighboring_window right
# map ctrl+k neighboring_window up
# map ctrl+j neighboring_window down

# Switch tabs
map kitty_mod+n next_tab
map kitty_mod+p previous_tab

map kitty_mod+t new_tab
map kitty_mod+q close_tab

map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+4 goto_tab 4

enabled_layouts splits:split_axis=horizontal
